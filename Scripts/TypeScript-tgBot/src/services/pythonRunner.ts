import { spawn } from "child_process";
import fs from "fs";
import path from "path";

export async function runPythonScript(): Promise<string> {
    return new Promise((resolve, reject) => {
        const scriptPath = "X:\\Bot-pars-file\\running_scripts.py";
        const pythonExecutable = "X:\\Bot-pars-file\\venv\\Scripts\\python.exe";

        console.log(`–ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É: ${scriptPath}`);
        console.log(`–ü—É—Ç—å –∫ Python: ${pythonExecutable}`);

        if (!fs.existsSync(scriptPath)) {
            reject(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${scriptPath}`);
            return;
        }

        if (!fs.existsSync(pythonExecutable)) {
            reject(`Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pythonExecutable}`);
            return;
        }

        const pythonProcess = spawn(pythonExecutable, [scriptPath], {
            cwd: "X:\\Bot-pars-file"
        });

        let stdout = "";
        let stderr = "";

        pythonProcess.stdout.on("data", (data) => {
            const output = data.toString();
            stdout += output;
            console.log(`Python stdout: ${output}`);
        });

        pythonProcess.stderr.on("data", (data) => {
            const error = data.toString();
            stderr += error;
            console.error(`Python stderr: ${error}`);
        });

        pythonProcess.on("close", (code) => {
            console.log(`Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
            if (code === 2) {
                try {
                    const jsonPath = path.join("X:\\Bot-pars-file", "Scripts", "Input-Output", "json-file", "formatted.json");
                    if (fs.existsSync(jsonPath)) {
                        const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
                        resolve(formatSchedule(jsonData));
                    } else {
                        resolve("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ñ–∞–π–ª formatted.json –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    }
                } catch (error) {
                    reject(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞: ${error}`);
                }
            } else {
                reject(`–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ö–æ–¥: ${code}\n–û—à–∏–±–∫–∞: ${stderr}`);
            }
        });

        pythonProcess.on("error", (error) => {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python: ${error}`);
            reject(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: ${error.message}`);
        });
    });
}

function formatSchedule(data: any): string {
    let message = `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${data.date}*\n\n`;

    if (data.schedule) {
        for (const [lessonNumber, lesson] of Object.entries(data.schedule)) {
            message += `*${lessonNumber}.* ${lesson}\n`;
        }
    }

    return message;
}
